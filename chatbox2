#!/usr/bin/env python3

import nltk
import numpy as np
import random
import string 
    # to process standard python strings
#import nltk.download( 'stopwords' )
from nltk.corpus import stopwords

f = open('genesis.txt', 'r', errors = 'ignore')
raw = f.read()
raw = raw.lower()
    # converts to lowercase

#nltk.download('punkt') # first-time use only
#nltk.download('wordnet') # first-time use only

sent_tokens = nltk.sent_tokenize(raw)
    # converts to list of sentences 
word_tokens = nltk.word_tokenize(raw)
    # converts to list of words

lemmer = nltk.stem.WordNetLemmatizer()

# Lemmatizing words to their basic form 
def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)

def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))
 
#print(sent_tokens)
#print(word_tokens)
#print(LemTokens)

#introducing stopword list
stopWords = set(stopwords.words('english'))
words = word_tokens
wordsFiltered = []

for w in word_tokens:
    if w not in stopWords:
        wordsFiltered.append(w)

#print(wordsFiltered)

# formulating greeting responses 
GREETING_INPUTS = ("hello", "hi", "greetings", "sup", "what's up","hey",)
GREETING_RESPONSES = ["hi", "hey", "*nods*", "hi there", "hello", "I am glad! You are talking to me"]
def greeting(sentence):
 
    for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)

# importing maths stuff
from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.metrics.pairwise import cosine_similarity

# defines user responses
def response(user_response):
    robo_response=''
    sent_tokens.append(user_response)
    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize)
    tfidf = TfidfVec.fit_transform(sent_tokens)
    vals = cosine_similarity(tfidf[-1], tfidf)
    idx=vals.argsort()[0][-2]
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[-2]
    if(req_tfidf==0):
        robo_response=robo_response+"I am sorry! I don't understand you"
        return robo_response
    else:
        robo_response = robo_response+sent_tokens[idx]
        return robo_response
    
# beginning and ending a conversation
flag=True
print("ROBO: My name is Robo. I will answer your queries about Genesis. If you want to exit, type Bye!")
while(flag==True):
    user_response = input()
    user_response=user_response.lower()
    if(user_response!='bye'):
        if(user_response=='thanks' or user_response=='thank you' ):
            flag=False
            print("ROBO: You are welcome..")
        else:
            if(greeting(user_response)!=None):
                print("ROBO: "+greeting(user_response))
            else:
                print("ROBO: ",end="")
                print(response(user_response))
                sent_tokens.remove(user_response)
    else:
        flag=False
        print("ROBO: Bye! take care..")

#for line in "genesis.txt":
    #God = []
    #if "god" in f.read():
        #God = god 
        #print God.capitalize()
      
